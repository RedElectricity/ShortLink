{
  "version": 3,
  "sources": ["../node_modules/itty-router/dist/itty-router.min.mjs", "../node_modules/nanoid/index.browser.js", "../index.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["function e({base:t=\"\",routes:n=[]}={}){return{__proto__:new Proxy({},{get:(e,a,o)=>(e,...r)=>n.push([a.toUpperCase(),RegExp(`^${(t+e).replace(/(\\/?)\\*/g,\"($1.*)?\").replace(/(\\/$)|((?<=\\/)\\/)/,\"\").replace(/:(\\w+)(\\?)?(\\.)?/g,\"$2(?<$1>[^/]+)$2$3\").replace(/\\.(?=[\\w(])/,\"\\\\.\").replace(/\\)\\.\\?\\(([^\\[]+)\\[\\^/g,\"?)\\\\.?($1(?<=\\\\.)[^\\\\.\")}/*$`),r])&&o}),routes:n,async handle(e,...r){let a,o,t=new URL(e.url);e.query=Object.fromEntries(t.searchParams);for(var[p,s,u]of n)if((p===e.method||\"ALL\"===p)&&(o=t.pathname.match(s))){e.params=o.groups;for(var c of u)if(void 0!==(a=await c(e.proxy||e,...r)))return a}}}}export default{Router:e};export{e as Router};\n", "export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n", "import { Router } from 'itty-router'\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Create a new router\r\nconst router = Router()\r\n\r\n/*\r\nOur index route, a simple hello world.\r\n*/\r\nrouter.get(\"/\", () => {\r\n  return new Response(fetch(\"/page/index.html\").text, {\r\n    headers: {\r\n      \"content-type\": \"text/html;charset=UTF-8\",\r\n    },\r\n  })\r\n})\r\n\r\nrouter.post(\"/api/addLink\", async request => {\r\n  var url\r\n  var expiration\r\n\r\n  if (request.headers.get(\"Content-Type\") === \"application/json\") {\r\n    rawRequest = await request.json()\r\n    url = rawRequest[\"url\"]\r\n    expiration = rawRequest[\"expiration\"]\r\n  }\r\n\r\n  linkId = nanoid()\r\n\r\n  if (expiration == -1) {\r\n    await env.LinkDatabase.put(linkId, url)\r\n  } else {\r\n    await env.LinkDatabase.put(linkId, url, {expiration: expiration})\r\n  }\r\n\r\n  const returnData = JSON.stringify({\r\n    \"linkId\": linkId\r\n  })\r\n\r\n  return new Response(returnData, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n})\r\n\r\nrouter.all(\":linkId\", ({ params }) => {\r\n  // Decode text like \"Hello%20world\" into \"Hello world\"\r\n  let linkId = decodeURIComponent(params.linkId)\r\n\r\n  const rawLink = env.LinkDatabase.get(linkId)\r\n  \r\n  if (rawLink == null) {\r\n    return new Response(fetch(\"/page/404.html\").text, {\r\n      headers: {\r\n        \"content-type\": \"text/html;charset=UTF-8\",\r\n      },\r\n    })\r\n  }\r\n  return new Response.redirect(rawLink)\r\n})\r\n\r\n\r\n\r\naddEventListener('fetch', (e) => {\r\n  e.respondWith(router.handle(e.request))\r\n})\r\n"],
  "mappings": "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",
  "names": ["e", "t", "linkId", "e"]
}
